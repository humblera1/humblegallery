name: CI/CD Pipeline

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Copy .env
        run: php -r "file_exists('.env') || copy('.env.dist', '.env');"

      - name: Initialize Yii2 Application
        run: |
          php init --env=Production --overwrite=All --delete=All

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker images using Docker Compose
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          COMPOSE_PROJECT_NAME: humblegallery
          COMMIT_TAG: ${{ github.ref_name }}
        run: |
          docker compose -f docker-compose.prod.yml build
          docker compose -f docker-compose.prod.yml push

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Copy files to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.TIMEWEB_HOST }}
          username: ${{ secrets.TIMEWEB_USER }}
          password: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "docker-compose.prod.yml,docker/"
          target: "/home/projects/humblegallery/"

      - name: Deploy to Production Server
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          COMPOSE_PROJECT_NAME: humblegallery
          COMMIT_TAG: ${{ github.ref_name }}
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.TIMEWEB_HOST }}
          username: ${{ secrets.TIMEWEB_USER }}
          password: ${{ secrets.SSH_PRIVATE_KEY }}
          envs: DOCKER_USERNAME,COMPOSE_PROJECT_NAME,COMMIT_TAG
          script: |
            cd /home/projects/humblegallery
            echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u $DOCKER_USERNAME --password-stdin
            
            docker compose -f docker-compose.prod.yml pull
            docker compose -f docker-compose.prod.yml up -d
            docker compose -f docker-compose.prod.yml ps

          # export DEPLOY_ID=$(date +%Y%m%d_%H%M%S)
          # export COMPOSE_PROJECT_NAME=humblegallery_${DEPLOY_ID}
          # docker compose -f docker-compose.prod.yml up -d
          # sleep 10
          # export CURRENT_DEPLOYMENT=$(docker ps --filter "name=humblegallery_" --format "{{.Names}}" | grep "nginx" | grep -v ${DEPLOY_ID} | cut -d_ -f1-2 || true)
          # if [ ! -z "$CURRENT_DEPLOYMENT" ]; then
          #  COMPOSE_PROJECT_NAME=$CURRENT_DEPLOYMENT docker compose -f docker-compose.prod.yml down
          #  docker image prune -f
          # fi
          # docker compose -f docker-compose.prod.yml ps